searchState.loadedDescShard("jagua_rs", 0, "A fast and fearless Collision Detection Engine for 2D …\nπ as fsize.\nEverything collision detection engine related\nEntities to model 2D irregular cutting and packing problems\nThe floating point type used in jagua-rs. <code>f32</code> by default, …\nGeometric primitives and base algorithms\nParser and JSON (de)serialization\nHelper functions\nCollision detection engine itself\nEverything related to the Hazard Proximity Grid\nSnapshot of the state of CDEngine at a given time. The …\nThe Collision Detection Engine (CDE). The CDE can resolve …\nReturns all hazards in the CDE, both static and dynamic.\nChecks whether a circle definitely collides with any of …\nCollects all hazards with which the polygon collides and …\nCollects all hazards with which the surrogate collides and …\nCommits all pending deregisters by actually removing them …\nRemoves a hazard from the CDE. If <code>commit_instant</code> the …\nReturns all hazards in the CDE, which can change during …\nChecks whether an edge definitely collides with any of the …\nFlushes all uncommitted deregisters in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf the grid has uncommitted deregisters, it is considered …\nReturns all the (relevant) hazards present inside any …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether a point definitely collides with any of the …\nChecks whether a simple polygon collides with any of the …\nRegisters a new hazard in the CDE.\nRestores the CDE to a previous state, as described by the …\nReturns all hazards in the CDE, which cannot change during …\nChecks whether a surrogate collides with any of the …\nChecks whether a reference simple polygon, with a …\nRepresents all regions outside the bin\nRepresents a hole in the bin.\nDefines a certain spatial constraint that affects the …\nEntity inducing the <code>Hazard</code>. All entities are uniquely …\nRepresents a zone in the bin with a specific quality level …\nAn item placed in the layout.\nHazards can be either active or inactive, inactive hazards …\nThe entity inducing the hazard\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the entity is dynamic in nature, i.e. it can be …\nWhether the entity universally applicable, i.e. all items …\nWhether the entity induces an <code>Interior</code> or <code>Exterior</code> hazard\nThe shape of the hazard\nDeems all hazards induced by the <code>Bin</code> as irrelevant.\nCombines multiple <code>HazardFilter</code>s into a single filter.\nDeems hazards induced by specific entities as irrelevant.\nTrait that allows for ignoring out specific hazards. …\nDeems hazards induced by <code>QualityZone</code>s above a cutoff …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the entities that are deemed irrelevant by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the next cell to visit and pops it from the queue, …\nReports if the cell was inside or outside the boundary of …\nResets the state of the boundary fill algorithm, with a …\nRepresentation of a grid of optional elements of type T …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the indices of the 8 directly neighboring cells. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new grid from a vector of values of type T and …\nGenerates a grid of equal sized square rectangles within a …\nError type for when the <code>HazardProximityGrid</code> is in a dirty …\nGrid of cells which store information about hazards in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate affected the cell\nRepresents a cell in the Hazard Proximity Grid\nAll possible results of an update on a cell in the …\nUpdate did not affect the cell and its neighbors are also …\nUpdate did not affect the cell, but its neighbors can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nproximity of closest quality zone for each quality, zero …\nProximity of universal static hazards, zero if inside\nProximity of closest hazard which is universally …\nThe hazard is entirely present in the node\nThe hazard is entirely absent from the node\nThe hazard is present in the node, but only partially, …\nHow a Hazard is present in a [QTNode]\nRepresents the manifestation of a Hazard in a [QTNode]\nReturns the resulting QTHazards after constricting to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA node in the quadtree\nThe bounding box of the node\nThe children of the node, if any\nGathers all hazards that collide with the entity and …\nUsed to detect collisions in a binary fashion: either …\nUsed to detect collisions in a broad fashion: Returns …\nUsed to detect collisions with a single Returns …\nReturns the argument unchanged.\nThe hazards present in the node\nCalls <code>U::from(self)</code>.\nThe level of the node in the tree, 0 being the bottom-most …\nAll edges of the hazard are relevant for the node\nDefines a set of edges from a hazard that is partially …\nOnly some specific indices of the hazard’s edges are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon trait for all geometric primitives that can be …\nA container in which items can be placed.\nThe starting state of the <code>CDEngine</code> for this bin.\nReturns the argument unchanged.\nCreate a new <code>Bin</code> for a strip-packing problem. Instead of a …\nShapes of holes/defects in the bins, if any\nCalls <code>U::from(self)</code>.\nThe contour of the bin\nTransformation applied to the shape with respect to the …\nZones of different qualities in the bin, stored per …\nThe cost of using the bin\nBin-packing problem instance: a set of items to be packed …\nSet of bins available to pack the items, along with their …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTotal area of all items in the instance\nItems to be packed in the instance, along with their …\nAn <code>Instance</code> is the static (unmodifiable) representation of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for shared functionality of all instance variants.\nStrip-packing problem instance: a set of items to be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total area of the items\nThe items to be packed and their quantities\nThe (fixed) height of the strip\nItem to be placed in a Layout\nPossible rotations in which to place the item\nThe quality of the item, if <code>None</code> the item requires full …\nReturns the argument unchanged.\nFilter for hazards that the item is unaffected by\nCalls <code>U::from(self)</code>.\nTransformation applied to the shape with respect to the …\nContour of the item\nA Layout is made out of a Bin with a set of Items …\nImmutable and compact representation of a Layout. <code>Layout</code>s …\nThe bin used for this layout\nThe bin used for this layout\nReturns the collision detection engine for this layout\nThe collision detection engine snapshot for this layout\nMakes sure that the collision detection engine is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe unique identifier of the layout, used only to match …\nThe unique identifier of the layout, used only to match …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if no items are placed\nHow the items are placed in the bin\nHow the items are placed in the bin\nReturns the usage of the bin with the items placed. It is …\nThe usage of the bin with the items placed\nUnique key for each <code>PlacedItem</code> in a layout.\nRepresents an <code>Item</code> that has been placed in a <code>Layout</code>\nThe transformation that was applied to the <code>Item</code> before it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe filter for hazards that the <code>Item</code> is unaffected by\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the type of <code>Item</code> that was placed\nThe shape of the <code>Item</code> after it has been transformed and …\nEncapsulates all required information to place an <code>Item</code> in …\nThe decomposition of the transformation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe id of the item to be placed\nWhich layout to place the item in\nBin Packing Problem\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBin Packing Problem\nEnum which contains all the different problem types. A …\nStrip Packing Problem\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnique index for a <code>Layout</code> in a problem instance.\nTrait for public shared functionality of all problem …\nSaves the current state of the problem as a <code>Solution</code>.\nMakes sure that the all collision detection engines are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>LayoutIndex</code> of all layouts.\nThe quantity of each item that is requested but currently …\nPlaces an item into the problem instance according to the …\nThe quantity of each item that is currently placed in the …\nRemoves a placed item (with its unique key) from a …\nRestores the state of the problem to a previous <code>Solution</code>.\nReturns the <code>LayoutIndex</code> of all template layouts that have …\nTemplate layouts are empty and immutable. For every unique …\nStrip Packing Problem\nShrinks the strip to the minimum width that fits all items.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModifies the shape of the strip to a new rectangle. All …\nAdds or removes width at the front of the strip.\nAdds or removes width, dividing it equally at the front …\nAdds or removes width in the back of the strip.\nReturns the horizontal range occupied by the placed items. …\nReturns the horizontal range occupied by the placed items. …\nReturns the total width occupied by the placed items.\nReturns the width occupied by the placed items.\nRepresents a zone of inferior quality in the <code>Bin</code>\nMaximum number of qualities that can be used\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHigher quality is better\nThe outer shapes of all zones of this quality\nRepresents a snapshot of a <code>Problem</code> at a specific moment. …\nQuantity of bins used for each type of bin\nRatio of included item area vs total demanded item area in …\nReturns the argument unchanged.\nUnique identifier for the solution\nCalls <code>U::from(self)</code>.\nWhether all items demanded in the <code>instance</code> are placed\nSnapshots of all <code>Layout</code>s in the <code>Problem</code> at the moment the …\nReturns the quantities of the items that still need to be …\nQuantity of placed items for each <code>Item</code> in the solution\nTarget quantity of each <code>Item</code> in the solution\nInstant the solution was created\nAverage usage of bins in the solution\nFilters a set of points to only include the points that …\nReturns the indices of the points in the SimplePolygon …\nA proper rigid transformation, decomposed into a rotation …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe rotation in radians\nThe translation in the x and y-axis\nGenerates additional poles for a shape alongside the PoI\nGenerates the Pole of Inaccessibility (PoI). The PoI is …\nSurrogate representation of a SimplePolygon for fail-fast …\nIndices of the points in the SimplePolygon that form the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of poles that will be checked during fail-fast\nSet of piers\nSet of poles\nCircle in which all poles are contained\nAny rotation is allowed\nOnly a limited set of rotations is allowed\nA ∩ B = ∅\nA ⊆ B\nPossible relations between two geometric entities A and B. …\nA ∩ B ≠ ∅ and neither A ⊆ B nor B ⊆ A\nNo rotation is allowed\nB ⊆ A\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrait for types that can detect almost-collisions between …\nTrait for types that can detect collisions between itself …\nTrait for geometric primitives that can calculate …\nTrait for shared properties of geometric primitives.\nTrait for types that can be transformed by a …\nTrait for types that can be transformed based on a …\nArea of the interior of the shape\nBounding box of the shape\nGeometric center of the shape\nThe distance between the two furthest points in the shape.\nDistance between the two primitives.\nDistance from <code>other</code> to the boundary of <code>self</code> and whether …\nSquared distance between the two primitives.\nSquared distance from <code>other</code> to the boundary of <code>self</code> and …\nGeometric primitive representing an axis-aligned rectangle\nFor all quadrants, contains indices of the two neighbors …\nReturns the relation between self and another AARectangle, …\nReturns the four corners in the following order: …\nReturns the argument unchanged.\nReturns the rectangle that is the result of inflating the …\nCalls <code>U::from(self)</code>.\nReturns the 4 quadrants of the rectangle, in the order NW, …\nReturns the relation between self and another AARectangle\nGeometric primitive representing a circle\nReturns the smallest possible circle that fully contains …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeometric primitive representing a line segment\nReturns the closest point which lies on the edge to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeometric primitive representing a point: (x, y)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeometric primitive representing a simple polygon: …\nBounding box\nMaximum distance between any two points in the polygon\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new simple polygon from a set of points, …\nPole of inaccessibility\nSet of bounds describing the polygon\nSurrogate representation (subset of the simple polygon)\nProper rigid transformation in matrix form\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe JSON representation of a bin\nThe JSON representation of a problem instance\nThe JSON representation of an item\nA polygon represented as an outer boundary and a list of …\nA zone with a specific quality level\nDifferent ways to represent a shape\nA simple polygon represented as a list of points (x, y)\nThe JSON representation of a strip with fixed height and …\nMultiple disjoint polygons\nPolygon with a single outer boundary and a list of holes\nAxis-aligned rectangle. With the left-bottom corner at (0, …\nPolygon with a single outer boundary\nList of allowed orientations angles (in degrees). If none …\nThe quality required for the entire item, if not defined …\nContainers for a Bin Packing Problem\nThe cost of using this bin\nNumber of times this item should be produced\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA list of holes in the polygon\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet of items to be produced\nThe name of the instance\nThe outer boundary of the polygon\nThe quality level of this zone\nPolygon shape of the bin\nPolygon shape of the item\nThe polygon shape of this zone\nNumber of this bin available, if not present, it is …\nContainer for a Strip Packing Problem\nThe value of the item (for knapsack problems)\nA list of zones with different quality levels\nType of container that was used\nRepresentation how a set of items are placed in a certain …\nSome statistics about the layout\nRepresents an item placed in a container\nRepresentation of a solution\nRepresents a proper rigid transformation defined as a …\nThe container that was used\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index of the item in the instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLayouts which compose the solution\nThe items placed in the container and where they were …\nThe rotation angle in radians\nThe time it took to generate the solution in seconds\nSome statistics about the layout\nThe transformation applied to the item to place it in the …\nThe translation vector (x, y)\nSum of the area of the produced items divided by the sum …\nThe percentage of the container that is packed with items\nThe height of the strip (fixed)\nThe index of the object in the instance\nThe width of the strip (variable)\nParses a <code>JsonInstance</code> into an <code>Instance</code>.\nBuilds a <code>Solution</code> from a set of <code>JsonLayout</code>s and an <code>Instance</code>…\nComposes a <code>JsonSolution</code> from a <code>Solution</code> and an <code>Instance</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a <code>JsonInstance</code> into an <code>Instance</code>.\nParses a <code>JsonInstance</code> and accompanying <code>JsonLayout</code>s into an …\nSet of functions used throughout assure the correctness of …\nConfiguration options for the library\nFunctions to simplify polygons in preprocessing\nPrints code to recreate a layout. Intended for debugging …\nConfiguration of the Collision Detection Engine\nReturns the argument unchanged.\nReturns the argument unchanged.\nTarget number of cells in the Hazard Proximity Grid\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConfiguration of the surrogate generation for items\nMaximum number of poles to generate\nnumber of piers to test during fail-fast\nNumber of poles to test during fail-fast (additional poles …\nPoles will stop being generated when the surrogate covers …\nMaximum depth of the quadtree\nWrapper around the <code>almost</code> crate for easy comparison of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSimplify the polygon to be strictly smaller than the …\nSimplify the polygon to be strictly larger than the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimplifies a shape (removing vertices) strictly inflating …\nmax deviation from the original polygon area as a fraction …")